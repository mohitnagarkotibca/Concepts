print('Isit working')
--------------------------------------------
Q1. What is the difference between list and tuples in Python?
Answer:
a=[1,2,3,4]
b=(1,2,3,4)

#list are immutable and tuples are not
a[0]=2
a # prints-- [2,2,3,4]

b[0]=3 ## error

#both can be accessed using index
a[0]
b[0]

#list is used when data is changing constanly
#tuple is used when data is fixed
--------------------------------------------
Q2:What are the key features of Python?
Answer:
. PORTABLE (WINDOWS-> LINUX)
. DYNAMICALY TYPED
. HIGH LEVEL LANGUAGE(NO NEED TO KNOW HOW MACHINE INSIDE IS ASSIGHNING MEMORY)
. Object oriented LANGUAGE
--------------------------------------------
Q3: What type of language is python? Programming or scripting?
Answer: Both

CPython is the interpreter . 
It compiles a Python code into intermediate bytecode which is interpreted by the CPython virtual machine.
--------------------------------------------
Q3: difference between compiler and interpreter
Answer: 
Compiler : Scans the entire program and translates It
interpreter: one line at a time

python does produce byte code, for Cpython Virual machine
--------------------------------------------
Q4: Type conversion in python
Answer:
int() – converts any data type into integer type
float() – converts any data type into float type
ord() – converts characters into integer
hex() – converts integers to hexadecimal
oct() – converts integer to octal
tuple() – This function is used to convert to a tuple.
set() – This function returns the type after converting to set.
list() – This function is used to convert any data type to a list type.
dict() – This function is used to convert a tuple of order (key,value) into a dictionary.
str() – Used to convert integer into a string.
--------------------------------------------
print(hex(10))
print(int(hex(10),16))
--------------------------------------------
Q5: Difference between Arrays and list?
Answer:
they are almost same, But the only difference is that array holds same type of data, whereas list hold different type of data
--------------------------------------------
Q6:What is a self in python?
Answer: Self is an instance of class.

class A:
    def __init__(self,z):
        self.x= z

    def A1(self):
        if self.x == True:    
            print('A1 True')
        else:
            print('A1 not True')
    A1()

a= A(True)
--------------------------------------------
#error
20 is not in [1,2,3,4] 
--------------------------------------------
#Not a error
20 not in [1,2,3,4]

print('left') if 2<3 else print('right')
--------------------------------------------
Q7: Difference between *args and **kwargs
Answer:

# in args we can pass any number of values,and they will stored and can be accessed as a list
def abc(*args):
    for i,val in enumerate(args):
        print(i,val)

abc(1,2,3,4,45,5,6,7,'',4)

def abcd(**kwargs):
    for i,val in kwargs.items():
        print(i,val)
abcd(a=19,b=20,c=20,d=24)
--------------------------------------------
Q8: What are python Generators?

--------------------------------------------

Q9: What is over riding?
Answer: The process of re-implementing a method in the child class is called method overriding
--------------------------------------------

Q10: what is over laoding?
Answer:This concept allow us to have methods with same name in a single class but the method must have different parameters
--------------------------------------------

Q11: Oops concept:

- Does python support multiple inheritence?
ans: A python class can inherit features from multiple classes

-What is Polymorphism in Python?
Ans: Polymorphism means the ability to take multiple forms. So, for instance, if the parent class has a method named ABC then the child class also can have a method with the same name ABC having its own parameters and variables. Python allows polymorphism.
Example:
len() method acts differently with respect to classes,
for str it returns number of characters,
for list it returns number of items,
for dict it returns number of keys.

-Define encapsulation in Python?
Ans: Encapsulation means binding the code and the data together. A Python class in an example of encapsulation.

- How do you do data abstraction in Python?

Ans: Data Abstraction is providing only the required details and hiding the implementation from the world. It can be achieved in Python by using interfaces and abstract classes.

--------------------------------------------

Q12:
What are instance variables?
ans: 
. variables which are made using the self keyword
. They are owned by the object of the class
--------------------------------------------
# Object to class variable works
# Object to instance variables works
# outside : class to class variable works
# outside: class to instance variable doesnt work
# class to a function works but self needs to be defined. otherwise, variables needs to be printed using class name
#class variables 'Type' can only be accessed using class name
#protected variables can be accessed using a object
#private variables cannot be accessed even from a object, they can only be used from 
# protected variables can be accessed using objects
#private variables cannot be accessed using inheritence
# but private variables cann be accessed using method
--------------------------------------------
SUMMARY:

PRIVATE VARIABLES:
- CAN BE ACCESSED ONLY WITHIN THE CLASS
- CANNOT BE ACCESSED USING instance Object
- CAN BE ACCESSED USING INSTANCE BY USING A METHOD.
- If inherited can only be accessed using methods in parent class

PROTECTED VARIABLES:
- CAN BE ACCESSED USING OBJECTS
- CAN BE ACCESSED USING methods
- CAN BE ACCESSED USING CLASS NAMES
- CAN BE ACCESSED USING INHERITED CLASS NAME and its object
-------------------------------------------
class A:
    def __init__(self):
        self.a1=10
        self._a2=20
        self.__a3=30
    def show(self):
        print(self.__a3)
class B(A):
    def __init__(self):
        super().__init__()
        self.x=50
    
a= A()
a.a1
a._a2
a.__a3
a.show()
a.show()

b=B()
b.a1
b._a2
b.__a3
--------------------------------------------

Q13:
What are class methods and what are statis methods?

ans:
 Class Methods are those which passes class as a parameters rather than a instance.

 syntax:
class A:
    x=1000
    @classmethod
    def c1(cls,amnt):
        print(amnt)
        print(cls.x)
a=A()
a.c1(100)


STATIC METHODS:
STATIC METHODS ARE THOSE WHICH DO NOT PASS ANY CLASS OR AN INSTANCE AS A parameters

THEY USUALLY ACT AS A UTILITY FUNCTIONS.


Q14: STR VS __REPR__

a=[1,2,3,4,5]
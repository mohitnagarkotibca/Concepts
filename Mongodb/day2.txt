
mongo "mongodb+srv://sandbox.ooxhh.mongodb.net/admin" --username m001-student
password= : m001-mongodb-basics
show dbs

use sample_airbnb

show collections

use sample_training

show collections

db.grades.findOne({})

db.grades.find({
    'student_id':0,
    'class_id':350
}).pretty()

db.grades.updateOne(
    {
        'class_id':350,
        'student_id':0
    },
    {
        '$push':{'Good_Qualities':''}
    }
)

db.grades.updateOne(
    {
        'class_id':350,
        'student_id':0
    },
    {
        '$push':{'Bad_Qualities':''}
    }
)

did some type above which led to creation of some new fields in database

now removing the mistakes

db.grades.findOne({'class_id':350,'student_id':0}).pretty()

#mistakes corrected
db.grades.update({'class_id':350,'student_id':0},{
    '$unset':{'Good Qualities':'','Bad Qualities':'','Good_Qualities':'','Bad_Qualities':''    
    }
})

db.grades.findOne({'class_id':350,'student_id':0})

db.grades.update({
    'class_id':350,
    'student_id':0
    },
    {'$set':{'study':[10,12,'grad','post-grad']}}
    )

db.grades.find({'study':'Masters'}).pretty()

db.grades.update({
    'class_id':350,
    'student_id':0
    },
    {'$set':{'study':'Masters'}}
    )

db.pets.insert({
 "_id": ObjectId("5ec414e5e722bb1f65a25451"),
 "pet": "wolf",
 "domestic?": false,
 "diet": "carnivorous",
 "climate": ["polar", "equatorial", "continental", "mountain"]
})

db.pets.find({}).pretty()
db.pets.updateMany({'pet':'cat'},
{'$push':{'climate':'continental','look':'adorable'}}
)

db.pets.updateMany({'pet':'wolf'},{
    '$set':{'climate':'continental'}
})
------------------------------------------------------------------------------------------------------------------------------
Problem:

The sample dataset contains a few databases that we will not use in this course. Clean up your Atlas cluster and get rid of all the collections in these databases:

    sample_analytics
    sample_geospatial
    sample_weatherdata

Does removing all collections in a database also remove the database?
------------------------------------------------------------------------------------------------------------------------------
show dbs
use sample_analytics
show collections
db.accounts.drop()
db.customers.drop()
db.transactions.drop()

YES REMOVING ALL THE COLLECTIONS INSIDE THE DATABASE ALSO REMOVES
DATABASE
------------------------------------------------------------------------------------------------------------------------------

USE SAMPLE_TRAINING ##not works
use sample_training

show collections

db.trips.find({'tripduration':{'$gte':300}}).pretty()
-------------------------------------------------------------------Lab 1: Comparison Operators
Problem:
To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.
How many documents in the sample_training.zips collection have fewer than 1000 people listed in the pop field?
Copy/paste the exact numeric value of the result that you get into the response field.
-------------------------------------------------------------------
db.zips.find({'pop':{'$lt':1000}}).count()
-------------------------------------------------------------------
Lab 2: Comparison Operators
Problem:
To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.
What is the difference between the number of people born in 1998 and the number of people born after 1998 in the sample_training.trips collection?
Enter the exact numeric value of the result that you get into the response field.
-------------------------------------------------------------------
use sample_training
show collections

db.trips.find({'birth year':{'$gt':1998}}).count() 
db.trips.find({'birth year':1998}).count()

##answer is 6
-------------------------------------------------------------------
Chapter 4: Advanced CRUD Operations
Lab 3: Comparison Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

Using the sample_training.routes collection find out which of the following statements will return all routes that have at least one stop in them?
-------------------------------------------------------------------
show collections
db.routes.findOne()

db.routes.find({'stops':{'$ne':0}}).count()
db.routes.find({'stops':{'$gt':0}}).count()
